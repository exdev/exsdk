.TH al_fixadd 3 "" "Allegro reference manual"
.SH NAME
.PP
al_fixadd - Allegro 5 API
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro.h>

al_fixed\ al_fixadd(al_fixed\ x,\ al_fixed\ y);
\f[]
.fi
.SH DESCRIPTION
.PP
Although fixed point numbers can be added with the normal \f[C]+\f[]
integer operator, that doesn\[aq]t provide any protection against
overflow.
If overflow is a problem, you should use this function instead.
It is slower than using integer operators, but if an overflow occurs it
will set Allegro\[aq]s errno and clamp the result, rather than just
letting it wrap.
.PP
Example:
.IP
.nf
\f[C]
\ \ \ \ al_fixed\ result;

\ \ \ \ /*\ This\ will\ put\ 5035\ into\ `result\[aq].\ */
\ \ \ \ result\ =\ al_fixadd(al_itofix(5000),\ al_itofix(35));

\ \ \ \ /*\ Sets\ errno\ and\ puts\ -32768\ into\ `result\[aq].\ */
\ \ \ \ result\ =\ al_fixadd(al_itofix(-31000),\ al_itofix(-3000));
\ \ \ \ assert(!al_get_errno());\ /*\ This\ will\ fail.\ */
\f[]
.fi
.SH RETURN VALUE
.PP
Returns the clamped result of adding \f[C]x\f[] to \f[C]y\f[], setting
Allegro\[aq]s errno to ERANGE if there was an overflow.
.SH SEE ALSO
.PP
al_fixsub(3), al_fixmul(3), al_fixdiv(3).
