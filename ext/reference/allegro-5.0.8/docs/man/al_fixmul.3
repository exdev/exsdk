.TH al_fixmul 3 "" "Allegro reference manual"
.SH NAME
.PP
al_fixmul - Allegro 5 API
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro.h>

al_fixed\ al_fixmul(al_fixed\ x,\ al_fixed\ y);
\f[]
.fi
.SH DESCRIPTION
.PP
A fixed point value can be multiplied or divided by an integer with the
normal \f[C]*\f[] and \f[C]/\f[] operators.
To multiply two fixed point values, though, you must use this function.
.PP
If an overflow occurs, Allegro\[aq]s errno will be set and the maximum
possible value will be returned, but errno is not cleared if the
operation is successful.
This means that if you are going to test for overflow you should call
\f[C]al_set_errno(0)\f[] before calling al_fixmul(3).
.PP
Example:
.IP
.nf
\f[C]
\ \ \ \ al_fixed\ result;

\ \ \ \ /*\ This\ will\ put\ 30000\ into\ `result\[aq].\ */
\ \ \ \ result\ =\ al_fixmul(al_itofix(10),\ al_itofix(3000));

\ \ \ \ /*\ But\ this\ overflows,\ and\ sets\ errno.\ */
\ \ \ \ result\ =\ al_fixmul(al_itofix(100),\ al_itofix(3000));
\ \ \ \ assert(!al_get_errno());
\f[]
.fi
.SH RETURN VALUE
.PP
Returns the clamped result of multiplying \f[C]x\f[] by \f[C]y\f[],
setting Allegro\[aq]s errno to ERANGE if there was an overflow.
.SH SEE ALSO
.PP
al_fixadd(3), al_fixsub(3), al_fixdiv(3), al_get_errno(3).
