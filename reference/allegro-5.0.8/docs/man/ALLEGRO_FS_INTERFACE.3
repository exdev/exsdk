.TH ALLEGRO_FS_INTERFACE 3 "" "Allegro reference manual"
.SH NAME
.PP
ALLEGRO_FS_INTERFACE - Allegro 5 API
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro.h>

typedef\ struct\ ALLEGRO_FS_INTERFACE\ ALLEGRO_FS_INTERFACE;
\f[]
.fi
.SH DESCRIPTION
.PP
The available functions you can provide for a filesystem.
They are:
.IP
.nf
\f[C]
\ \ \ ALLEGRO_FS_ENTRY\ *\ \ fs_create_entry\ \ \ (const\ char\ *path);
\ \ \ void\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_destroy_entry\ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ const\ char\ *\ \ \ \ \ \ \ \ fs_entry_name\ \ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_update_entry\ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ uint32_t\ \ \ \ \ \ \ \ \ \ \ \ fs_entry_mode\ \ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ time_t\ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_entry_atime\ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ time_t\ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_entry_mtime\ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ time_t\ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_entry_ctime\ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ off_t\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_entry_size\ \ \ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_entry_exists\ \ \ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_remove_entry\ \ \ (ALLEGRO_FS_ENTRY\ *e);

\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_open_directory\ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ ALLEGRO_FS_ENTRY\ *\ \ fs_read_directory\ (ALLEGRO_FS_ENTRY\ *e);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_close_directory(ALLEGRO_FS_ENTRY\ *e);

\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_filename_exists(const\ char\ *path);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_remove_filename(const\ char\ *path);
\ \ \ char\ *\ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_get_current_directory(void);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_change_directory(const\ char\ *path);
\ \ \ bool\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fs_make_directory(const\ char\ *path);

\ \ \ ALLEGRO_FILE\ *\ \ \ \ \ \ fs_open_file(ALLEGRO_FS_ENTRY\ *e);
\f[]
.fi
